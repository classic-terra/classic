// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: terra/abs/v1beta1/watchlist.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Watchlist struct {
	Entries []WatchlistEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries"`
}

func (m *Watchlist) Reset()         { *m = Watchlist{} }
func (m *Watchlist) String() string { return proto.CompactTextString(m) }
func (*Watchlist) ProtoMessage()    {}
func (*Watchlist) Descriptor() ([]byte, []int) {
	return fileDescriptor_50570543f39fe615, []int{0}
}
func (m *Watchlist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Watchlist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Watchlist.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Watchlist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Watchlist.Merge(m, src)
}
func (m *Watchlist) XXX_Size() int {
	return m.Size()
}
func (m *Watchlist) XXX_DiscardUnknown() {
	xxx_messageInfo_Watchlist.DiscardUnknown(m)
}

var xxx_messageInfo_Watchlist proto.InternalMessageInfo

func (m *Watchlist) GetEntries() []WatchlistEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type WatchlistEntry struct {
	Address     string        `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	BlockHeight uint64        `protobuf:"varint,2,opt,name=blockHeight,proto3" json:"blockHeight,omitempty" yaml:"blockheight"`
	Coins       []*types.Coin `protobuf:"bytes,3,rep,name=coins,proto3" json:"coins,omitempty" yaml:"coins"`
}

func (m *WatchlistEntry) Reset()         { *m = WatchlistEntry{} }
func (m *WatchlistEntry) String() string { return proto.CompactTextString(m) }
func (*WatchlistEntry) ProtoMessage()    {}
func (*WatchlistEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_50570543f39fe615, []int{1}
}
func (m *WatchlistEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchlistEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchlistEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchlistEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchlistEntry.Merge(m, src)
}
func (m *WatchlistEntry) XXX_Size() int {
	return m.Size()
}
func (m *WatchlistEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchlistEntry.DiscardUnknown(m)
}

var xxx_messageInfo_WatchlistEntry proto.InternalMessageInfo

func (m *WatchlistEntry) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *WatchlistEntry) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *WatchlistEntry) GetCoins() []*types.Coin {
	if m != nil {
		return m.Coins
	}
	return nil
}

func init() {
	proto.RegisterType((*Watchlist)(nil), "terra.abs.v1beta1.Watchlist")
	proto.RegisterType((*WatchlistEntry)(nil), "terra.abs.v1beta1.WatchlistEntry")
}

func init() { proto.RegisterFile("terra/abs/v1beta1/watchlist.proto", fileDescriptor_50570543f39fe615) }

var fileDescriptor_50570543f39fe615 = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xbf, 0x4e, 0xf3, 0x30,
	0x14, 0xc5, 0xe3, 0xaf, 0xfd, 0xa8, 0xea, 0xa2, 0x0a, 0x2c, 0x84, 0x4a, 0x07, 0xa7, 0xcd, 0x42,
	0x07, 0xb0, 0x55, 0x58, 0x10, 0x5b, 0x83, 0x90, 0x98, 0x18, 0xb2, 0x20, 0xb1, 0xd9, 0xa9, 0x95,
	0x44, 0x34, 0x71, 0x65, 0x9b, 0x3f, 0x79, 0x0b, 0xde, 0x87, 0x17, 0xe8, 0xd8, 0x91, 0x29, 0x42,
	0xed, 0x1b, 0xf4, 0x09, 0x50, 0x9c, 0x36, 0x02, 0xb1, 0x59, 0x3a, 0xbf, 0x73, 0x7c, 0xcf, 0xbd,
	0x70, 0x68, 0x84, 0x52, 0x8c, 0x32, 0xae, 0xe9, 0xcb, 0x98, 0x0b, 0xc3, 0xc6, 0xf4, 0x95, 0x99,
	0x30, 0x9e, 0x25, 0xda, 0x90, 0xb9, 0x92, 0x46, 0xa2, 0x43, 0x8b, 0x10, 0xc6, 0x35, 0xd9, 0x22,
	0xfd, 0xa3, 0x48, 0x46, 0xd2, 0xaa, 0xb4, 0x7c, 0x55, 0x60, 0x1f, 0x87, 0x52, 0xa7, 0x52, 0x53,
	0xce, 0xb4, 0xa8, 0xd3, 0x42, 0x99, 0x64, 0x95, 0xee, 0xdd, 0xc3, 0xf6, 0xc3, 0x2e, 0x1b, 0x4d,
	0x60, 0x4b, 0x64, 0x46, 0x25, 0x42, 0xf7, 0xc0, 0xa0, 0x31, 0xea, 0x5c, 0x0c, 0xc9, 0x9f, 0x7f,
	0x48, 0x8d, 0xdf, 0x66, 0x46, 0xe5, 0x7e, 0x73, 0x51, 0xb8, 0x4e, 0xb0, 0xf3, 0x79, 0x1f, 0x00,
	0x76, 0x7f, 0x13, 0xe8, 0x0c, 0xb6, 0xd8, 0x74, 0xaa, 0x84, 0x2e, 0x53, 0xc1, 0xa8, 0xed, 0xa3,
	0x4d, 0xe1, 0x76, 0x73, 0x96, 0xce, 0xae, 0xbd, 0xad, 0xe0, 0x05, 0x3b, 0x04, 0x5d, 0xc1, 0x0e,
	0x9f, 0xc9, 0xf0, 0xe9, 0x4e, 0x24, 0x51, 0x6c, 0x7a, 0xff, 0x06, 0x60, 0xd4, 0xf4, 0x8f, 0x37,
	0x85, 0x8b, 0x2a, 0x87, 0x15, 0x63, 0x2b, 0x7a, 0xc1, 0x4f, 0x14, 0x4d, 0xe0, 0xff, 0xb2, 0x98,
	0xee, 0x35, 0xec, 0xec, 0x27, 0xa4, 0xaa, 0x4e, 0xca, 0xea, 0xf5, 0xf4, 0x37, 0x32, 0xc9, 0xfc,
	0x83, 0x4d, 0xe1, 0xee, 0x57, 0x71, 0xd6, 0xe1, 0x05, 0x95, 0xd3, 0x9f, 0x2c, 0x56, 0x18, 0x2c,
	0x57, 0x18, 0x7c, 0xad, 0x30, 0x78, 0x5f, 0x63, 0x67, 0xb9, 0xc6, 0xce, 0xe7, 0x1a, 0x3b, 0x8f,
	0xa7, 0x51, 0x62, 0xe2, 0x67, 0x4e, 0x42, 0x99, 0x52, 0xbb, 0x93, 0xf3, 0x54, 0x66, 0x22, 0xa7,
	0xa1, 0x54, 0x82, 0xbe, 0xd9, 0x5b, 0x99, 0x7c, 0x2e, 0x34, 0xdf, 0xb3, 0x7b, 0xbd, 0xfc, 0x0e,
	0x00, 0x00, 0xff, 0xff, 0x88, 0xb3, 0xdc, 0x89, 0xc5, 0x01, 0x00, 0x00,
}

func (m *Watchlist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Watchlist) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Watchlist) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWatchlist(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WatchlistEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchlistEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchlistEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWatchlist(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.BlockHeight != 0 {
		i = encodeVarintWatchlist(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintWatchlist(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWatchlist(dAtA []byte, offset int, v uint64) int {
	offset -= sovWatchlist(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Watchlist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovWatchlist(uint64(l))
		}
	}
	return n
}

func (m *WatchlistEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovWatchlist(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovWatchlist(uint64(m.BlockHeight))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovWatchlist(uint64(l))
		}
	}
	return n
}

func sovWatchlist(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWatchlist(x uint64) (n int) {
	return sovWatchlist(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Watchlist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWatchlist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Watchlist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Watchlist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatchlist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWatchlist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWatchlist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, WatchlistEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWatchlist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWatchlist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchlistEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWatchlist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchlistEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchlistEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatchlist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWatchlist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWatchlist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatchlist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatchlist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWatchlist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWatchlist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, &types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWatchlist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWatchlist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWatchlist(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWatchlist
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWatchlist
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWatchlist
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWatchlist
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWatchlist
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWatchlist
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWatchlist        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWatchlist          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWatchlist = fmt.Errorf("proto: unexpected end of group")
)
